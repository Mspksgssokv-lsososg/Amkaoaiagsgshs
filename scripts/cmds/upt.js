const { GoatWrapper } = require("fca-liane-utils");
const os = require("os");
const fs = require("fs-extra");
const axios = require("axios");
const path = require("path");

const startTime = new Date();

module.exports = {
  config: {
    name: "upt",
    author: "SK-SIDDIK-KHAN",
    countDown: 0,
    role: 0,
    category: "system",
    longDescription: {
      en: "Get System Information",
    },
  },

  onStart: async function ({ api, event, message }) {
    try {
      const frames = [
        "üîÑ ùóúùóªùó∂ùòÅùó∂ùóÆùóπùó∂ùòáùó∂ùóªùó¥...\n[‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]",
        "üîÑ ùóñùóµùó≤ùó∞ùó∏ùó∂ùóªùó¥ ùó¶ùòÅùóÆùòÅùòÄ...\n[‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]",
        "üîß ùóüùóºùóÆùó±ùó∂ùóªùó¥ ùóúùóªùó≥ùóº...\n[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë]",
        "‚úÖ ùóóùóºùóªùó≤!\n[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà]",
      ];

      const sent = await message.reply("‚öôÔ∏è Gathering system info...");

      let step = 0;
      const animate = async () => {
        if (step < frames.length) {
          await api.editMessage(frames[step], sent.messageID);
          step++;
          return setTimeout(animate, 600);
        } else {
          const uptimeInSeconds = (new Date() - startTime) / 1000;
          const days = Math.floor(uptimeInSeconds / (3600 * 24));
          const hours = Math.floor((uptimeInSeconds % (3600 * 24)) / 3600);
          const minutes = Math.floor((uptimeInSeconds % 3600) / 60);
          const secondsLeft = Math.floor(uptimeInSeconds % 60);
          const uptimeFormatted = `${days}d ${hours}h ${minutes}m ${secondsLeft}s`;

          const cpuUsage =
            os
              .cpus()
              .map((cpu) => cpu.times.user)
              .reduce((acc, curr) => acc + curr, 0) / os.cpus().length;

          const totalMemoryGB = os.totalmem() / 1024 ** 3;
          const freeMemoryGB = os.freemem() / 1024 ** 3;
          const usedMemoryGB = totalMemoryGB - freeMemoryGB;

          const currentDate = new Date();
          const date = currentDate.toLocaleDateString("en-US");
          const time = currentDate.toLocaleTimeString("en-US", {
            timeZone: "Asia/Dhaka",
            hour12: true,
          });

          const timeStart = Date.now();
          await new Promise((res) => setTimeout(res, 100));
          const ping = Date.now() - timeStart;
          const pingStatus = ping < 1000 ? "‚úÖ| ùñ≤ùóÜùóàùóàùóçùóÅ ùñ≤ùóíùóåùóçùñæùóÜ" : "‚õî| ùñ°ùñ∫ùñΩ ùñ≤ùóíùóåùóçùñæùóÜ";

          const systemInfo = `‚ô°   ‚à©_‚à©
Ôºà‚Äû‚Ä¢ ÷ä ‚Ä¢‚Äû)‚ô°
‚ï≠‚îÄ‚à™‚à™‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°
‚îÇ ùó®ùó£ùóßùóúùó†ùóò ùóúùó°ùóôùó¢
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°
‚îÇ ‚è∞ ùó•ùó®ùó°ùóßùóúùó†ùóò
‚îÇ  ${uptimeFormatted}
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°
‚îÇ üëë ùó¶ùó¨ùó¶ùóßùóòùó† ùóúùó°ùóôùó¢
‚îÇùôæùöÇ: ${os.type()} ${os.arch()}
‚îÇùôªùô∞ùôΩùô∂ ùöÖùô¥ùöÅ: ${process.version}
‚îÇùô≤ùôøùöÑ ùôºùôæùô≥ùô¥ùôª: ${os.cpus()[0].model}
‚îÇùöÇùöÉùôæùöÅùô∞ùô∂ùô¥: ${usedMemoryGB.toFixed(2)} GB / ${totalMemoryGB.toFixed(2)} GB
‚îÇùô≤ùôøùöÑ ùöÑùöÇùô∞ùô∂ùô¥: ${cpuUsage.toFixed(1)}%
‚îÇùöÅùô∞ùôº ùöÑùöÇùô∂ùô¥: ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)} MB
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°
‚îÇ ‚úÖ ùó¢ùóßùóõùóòùó• ùóúùó°ùóôùó¢
‚îÇùô≥ùô∞ùöÉùô¥: ${date}
‚îÇùöÉùô∏ùôºùô¥: ${time}
‚îÇùôøùô∏ùôΩùô∂: ${ping}ms
‚îÇùöÇùöÉùô∞ùöÉùöÑùöÇ: ${pingStatus}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°`;

          const imageUrl = "https://drive.google.com/uc?export=download&id=12YtKMHbqz_Aj5GNiPkHjQ-Jia6icDbDn";
          const imagePath = path.join(__dirname, "upt_image.jpg");

          const response = await axios.get(imageUrl, { responseType: "arraybuffer" });
          fs.writeFileSync(imagePath, Buffer.from(response.data, "binary"));

          const attachment = fs.createReadStream(imagePath);
          await api.sendMessage({ body: systemInfo, attachment }, event.threadID, () => {
            fs.unlinkSync(imagePath); // cleanup
          }, sent.messageID);
        }
      };

      animate();
    } catch (err) {
      console.error("Error in upt command:", err);
      message.reply("‚ùå Error Upt info");
    }
  },
};

const wrapper = new GoatWrapper(module.exports);
wrapper.applyNoPrefix({ allowPrefix: true });